// Generated by Dagger (https://google.github.io/dagger).
package webkul.opencart.mobikul.dagger;

import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import webkul.opencart.mobikul.CategoryActivity;
import webkul.opencart.mobikul.MainActivity;
import webkul.opencart.mobikul.ViewProductSimple;
import webkul.opencart.mobikul.networkManager.ApiInteface;
import webkul.opencart.mobikul.networkManager.RetrofitCallback;

public final class DaggerAppComponent implements AppComponent {
  private ContextModule_GetContextFactory getContextProvider;

  private Provider<ApiInteface> getApiInterfaceProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.getContextProvider = ContextModule_GetContextFactory.create(builder.contextModule);
    this.getApiInterfaceProvider =
        DoubleCheck.provider(
            AppModule_GetApiInterfaceFactory.create(builder.appModule, getContextProvider));
  }

  @Override
  public void inject(ViewProductSimple b) {}

  @Override
  public void inject(RetrofitCallback retro) {}

  @Override
  public ApiInteface getApiInterface() {
    return getApiInterfaceProvider.get();
  }

  @Override
  public void inject(MainActivity productPage) {}

  @Override
  public void inject(CategoryActivity productPage) {}

  public static final class Builder {
    private ContextModule contextModule;

    private AppModule appModule;

    private Builder() {}

    public AppComponent build() {
      if (contextModule == null) {
        throw new IllegalStateException(ContextModule.class.getCanonicalName() + " must be set");
      }
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      return new DaggerAppComponent(this);
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder contextModule(ContextModule contextModule) {
      this.contextModule = Preconditions.checkNotNull(contextModule);
      return this;
    }
  }
}
